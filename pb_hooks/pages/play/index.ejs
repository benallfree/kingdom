<div
  x-init="
    const watch = (()=>{
      let unsub
      return ()=>{
        unsub?.()
        unsub = pb.realtime.subscribe(`rooms/2ruk2zo3x8k11h5/delta`, (e) => {
          Object.entries(e).forEach(([key, value]) => {
            let node = roomState
            const keys = key.split('.')
            const leafKey = keys.pop()
            const leafValue = value
            const leafNode = keys.reduce((node, k) => {
              if(!node[k]) {
                node[k] = {}
              }
              return node[k]
            }, roomState)
            leafNode[leafKey] = leafValue
          })
        })
      }
    })()
    const login = ()=> {
      pb.send(`/api/login`).then(res => {
        const {token, user} = res
        pb.authStore.save(token, user)
        isReady = true
        auth = user
        $nextTick(jdenticon)
        roomState = normalizeRoomState(res.roomState)
        watch()
      })
    }
    login()
    pb.realtime.subscribe('PB_CONNECT', (e) => {
      // login()
    })

   
    $watch('roomState', value => {
      $nextTick(jdenticon)
    })
    const calcTimeRemaining = (roomState) => {
      msRemaining = Math.max(0, roomState.roundStartedAt + roomState.roundTtl - Date.now())
      pctRemaining = msRemaining / roomState.roundTtl
    }
    $watch('roomState', calcTimeRemaining, value => {
      const { msRemaining, pctRemaining } = calcTimeRemaining(value)
      msRemaining = msRemaining
      pctRemaining = pctRemaining
    })
    $watch('roomState', value => {
      if (!auth ) return
      playerState = value.players[auth.id] || { coins: 10, health: 0 }
    })
    $watch('roomState', value => {
      const cellEntries = Object.entries(value.grid)
      for(let i = 0; i < cellEntries.length; i++) {
        const [idx, cell] = cellEntries[i]
        if(cell.hasPrize) {
          prizeIdx =idx
          break
        }
      }
    })
    $nextTick(() => {
      setInterval(() => {
        calcTimeRemaining(roomState)
      }, 100)
    })
    "
  x-data="{
    normalizeRoomState(roomState) {
      for(let i = 1; i <= 100; i++) {
        roomState.grid[i] = {
          playerId: null,
          hasPrize: this.prizeIdx == i,
          health: 0,
          ...roomState.grid[i]
        }
      }
      return roomState
    },
    error: null,
    prizeIdx: null,
    msRemaining: 0,
    pctRemaining: 0,
    auth: null,
    isReady: false,
    getCell(idx) {
      if (!this.roomState.grid[idx]) {
        this.roomState.grid[idx] = {
          playerId: null,
          health: 0
        }
      }
      return this.roomState.grid[idx]
    },
    getClientCell(idx) {
      if (!this.clientRoomState.grid[idx]) {
        this.clientRoomState.grid[idx] = {
          joining: false
        }
      }
      return this.clientRoomState.grid[idx]
    },
    roomState: {
      grid: {},
      players: {},
      roundNum: 0,
      roundStartedAt: +new Date(),
      maxRounds: 0,
      roundTtl: 0
    },
    clientRoomState: {
      grid: {}
    },
    playerState: {
      coins: 10,
      health: 0
    },
    idBase: 0,
    uniqId() {
      return this.idBase++
    },
    join(idx) {
      this.error = null
      this.getClientCell(idx).joining = true
      pb.send(`/api/join?idx=${idx}`, { requestKey: this.uniqId()}).then(res => {
        this.error = res.error
      }).finally(() => {
        this.getClientCell(idx).joining = false
      })
    }
  }"
>
  <div class="h-[40px] overflow-hidden">
    <img
      src="<%=asset('/splash.webp')%>"
      class="relative -translate-y-1/2 top-[27px]"
    />
  </div>

  <div x-show="isReady">
    <div class="flex flex-col items-center">
      <div class="flex flex-row items-center gap-2 mt-2">
        <div class="ml-2 mr-2">üïö</div>
        <progress
          x-bind:class="`progress  ${pctRemaining > 0.7 ? 'progress-success' : (pctRemaining > 0.3 ? 'progress-info' : 'progress-error')} w-72`"
          x-bind:max="roomState.roundTtl"
          x-bind:value="msRemaining"
        ></progress>
        <div class="relative w-16 h-8">
          <svg
            class="size-8 absolute top-0 left-0"
            x-show="auth"
            x-bind:data-jdenticon-value="auth?.id"
          ></svg>
          <div class="absolute top-0 right-0 text-xs">
            ‚öíÔ∏è<span x-text="playerState.coins"></span>
          </div>
          <div class="absolute bottom-0 right-0 text-xs">
            ‚ù§Ô∏è<span x-text="playerState.health"></span>
          </div>
        </div>
      </div>
      <div
        x-text="error?.message"
        x-bind:class="`text-error h-5 mb-2 text-center w-full ${error ? `visible` : `invisible`}`"
      ></div>

      <div>
        <div class="grid grid-cols-10 gap-0">
          <template x-for="i in 100">
            <div
              x-bind:class="`w-10 h-10 border border-primary border-1 relative ${getCell(i).hasPrize ? 'bg-yellow-300 animate-[pulse_1s_ease-in-out_infinite]' : ''}`"
              x-on:click="join(i)"
            >
              <div
                x-show="getClientCell(i).joining"
                class="absolute top-0 left-0 w-full h-full animate-spin"
              >
                <svg
                  class="w-full h-full"
                  x-bind:data-jdenticon-value="getCell(i).playerId"
                ></svg>
              </div>
              <div
                x-show="error?.idx == i"
                class="absolute top-0 left-0 w-full h-full bg-red-600 animate-out fade-out duration-500 fill-mode-forwards"
              ></div>
              <div x-show="getCell(i).playerId && !getClientCell(i).joining">
                <div class="absolute top-0 left-0 w-full h-full">
                  <svg
                    class="w-full h-full"
                    x-bind:data-jdenticon-value="getCell(i).playerId"
                  ></svg>
                </div>
                <div
                  x-show="getCell(i).health"
                  x-text="getCell(i).health"
                  class="absolute bottom-1 right-1 text-xs w-5 h-5 flex items-center justify-center bg-secondary text-secondary-content rounded-full"
                ></div>
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>
    <div x-show="roomState.prize.banner" x-html="roomState.prize.banner"></div>
  </div>
</div>
