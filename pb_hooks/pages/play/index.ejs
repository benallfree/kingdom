<div
  x-init="
   pb.send(`/api/login`).then(res => {
      const {token, user} = res
      pb.authStore.save(token, user)
      isReady = true
      auth = user
      $nextTick(jdenticon)
      console.log({res})
      roomState = res.roomState
    })
    const unsub = pb.collection('rooms').subscribe('2ruk2zo3x8k11h5', (e) => {
      roomState = e.record.state
      $nextTick(jdenticon)
    })
    $watch('roomState', value => {
      msRemaining = value.roundExpiry - Date.now()
      pctRemaining = msRemaining / value.roundTtl
    })
    $watch('roomState', value => {
      if (!auth ) return
      playerState = value.players[auth.id] || { coins: 100, health: 0 }
    })
    $nextTick(() => {
      setInterval(() => {
        msRemaining = roomState.roundExpiry - Date.now()
        pctRemaining = msRemaining / roomState.roundTtl
      }, 100)
    })
    "
  x-data="{
    msRemaining: 0,
    pctRemaining: 0,
    auth: null,
    isReady: false,
    getCell(idx) {
      if (!this.roomState.grid[idx]) {
        this.roomState.grid[idx] = {
          playerId: null,
          health: 0
        }
      }
      return this.roomState.grid[idx]
    },
    getClientCell(idx) {
      if (!this.clientRoomState.grid[idx]) {
        this.clientRoomState.grid[idx] = {
          joining: false
        }
      }
      return this.clientRoomState.grid[idx]
    },
    roomState: {
      grid: {},
      players: {},
      roundNum: 0,
      roundExpiry: 0,
      maxRounds: 0,
      roundTtl: 0
    },
    clientRoomState: {
      grid: {}
    },
    playerState: {
      coins: 100,
      health: 0
    },
    idBase: 0,
    uniqId() {
      return this.idBase++
    },
    join(idx) {
      this.getClientCell(idx).joining = true
      pb.send(`/api/join?idx=${idx}`, { requestKey: this.uniqId()}).then(res => {
        Object.entries(res.roomState.grid).forEach(([k, v]) => {
          this.getCell(k).playerId = v.playerId
        })
        $nextTick(jdenticon)
        // console.log(JSON.stringify(this.grid, null, 2))
      }).finally(() => {
        this.getClientCell(idx).joining = false
      })
    }
  }"
>
  <div x-show="isReady">
    <div class="flex flex-col items-center">
      <div class="m-10">
        Round
        <progress
          x-bind:class="`progress  ${pctRemaining > 0.7 ? 'progress-success' : (pctRemaining > 0.3 ? 'progress-info' : 'progress-error')} w-96`"
          x-bind:max="roomState.roundTtl"
          x-bind:value="msRemaining"
        ></progress>
      </div>
      <div class="flex flex-row gap-4 mb-5">
        <svg
          class="size-8"
          x-show="auth"
          x-bind:data-jdenticon-value="auth?.id"
        ></svg>
        <div>Coins: <span x-text="playerState.coins"></span></div>
        <div>Health: <span x-text="playerState.health"></span></div>
      </div>
      <div>
        <div class="grid grid-cols-10 gap-1">
          <template x-for="i in 100">
            <div class="w-10 h-10 bg-primary relative" x-on:click="join(i)">
              <div
                x-show="getClientCell(i).joining"
                class="absolute top-0 left-0 w-full h-full bg-primary"
              >
                joining
              </div>
              <div x-show="getCell(i).playerId">
                <div class="absolute top-0 left-0 w-full h-full">
                  <svg
                    class="w-full h-full"
                    x-bind:data-jdenticon-value="getCell(i).playerId"
                  ></svg>
                </div>
                <div
                  x-text="getCell(i).health"
                  class="absolute bottom-1 right-1 text-xs w-5 h-5 flex items-center justify-center bg-secondary text-secondary-content rounded-full"
                ></div>
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>
</div>
