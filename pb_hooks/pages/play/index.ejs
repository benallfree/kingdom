<div
  x-init="
    const watch = (()=>{
      let unsub
      return ()=>{
        unsub?.()
        unsub = pb.realtime.subscribe(`rooms/2ruk2zo3x8k11h5/delta`, (e) => {
          Object.entries(e).forEach(([key, value]) => {
            let node = roomState
            const keys = key.split('.')
            const leafKey = keys.pop()
            const leafValue = value
            const leafNode = keys.reduce((node, k) => {
              if(!node[k]) {
                node[k] = {}
              }
              return node[k]
            }, roomState)
            leafNode[leafKey] = leafValue
          })
        })
      }
    })()
    const login = ()=> {
      pb.send(`/api/login`).then(res => {
        const {token, user} = res
        pb.authStore.save(token, user)
        isReady = true
        auth = user
        $nextTick(jdenticon)
        roomState = normalizeRoomState(res.roomState)
        watch()
      })
    }
    login()
    pb.realtime.subscribe('PB_CONNECT', (e) => {
      // login()
    })

   
    $watch('roomState', value => {
      $nextTick(jdenticon)
    })
    const calcTimeRemaining = (roomState) => {
      msRemaining = Math.max(0, roomState.roundStartedAt + roomState.roundTtl - Date.now())
      pctRemaining = msRemaining / roomState.roundTtl
    }
    $watch('roomState', calcTimeRemaining, value => {
      const { msRemaining, pctRemaining } = calcTimeRemaining(value)
      msRemaining = msRemaining
      pctRemaining = pctRemaining
    })
    $watch('roomState', value => {
      if (!auth ) return
      playerState = value.players[auth.id] || { coins: 10, health: 0 }
    })
    $watch('roomState', value => {
      const cellEntries = Object.entries(value.grid)
      for(let i = 0; i < cellEntries.length; i++) {
        const [idx, cell] = cellEntries[i]
        if(cell.hasPrize) {
          prizeIdx =idx
          break
        }
      }
    })
    $nextTick(() => {
      setInterval(() => {
        calcTimeRemaining(roomState)
      }, 100)
    })
    "
  x-data="{
    normalizeRoomState(roomState) {
      for(let i = 1; i <= 100; i++) {
        roomState.grid[i] = {
          playerId: null,
          hasPrize: this.prizeIdx == i,
          health: 0,
          ...roomState.grid[i]
        }
      }
      return roomState
    },
    error: null,
    prizeIdx: null,
    msRemaining: 0,
    pctRemaining: 0,
    auth: null,
    isReady: false,
    getCell(idx) {
      if (!this.roomState.grid[idx]) {
        this.roomState.grid[idx] = {
          playerId: null,
          health: 0
        }
      }
      return this.roomState.grid[idx]
    },
    getClientCell(idx) {
      if (!this.clientRoomState.grid[idx]) {
        this.clientRoomState.grid[idx] = {
          joining: false
        }
      }
      return this.clientRoomState.grid[idx]
    },
    roomState: {
      grid: {},
      players: {},
      roundNum: 0,
      roundStartedAt: +new Date(),
      maxRounds: 0,
      roundTtl: 0
    },
    clientRoomState: {
      grid: {}
    },
    playerState: {
      coins: 10,
      health: 0
    },
    idBase: 0,
    uniqId() {
      return this.idBase++
    },
    join(idx) {
      this.error = null
      this.getClientCell(idx).joining = true
      pb.send(`/api/join?idx=${idx}`, { requestKey: this.uniqId()}).then(res => {
        this.error = res.error
      }).finally(() => {
        this.getClientCell(idx).joining = false
      })
    }
  }"
>
  <div x-show="isReady">
    <div class="flex flex-col items-center">
      <div class="m-10">
        Round
        <progress
          x-bind:class="`progress  ${pctRemaining > 0.7 ? 'progress-success' : (pctRemaining > 0.3 ? 'progress-info' : 'progress-error')} w-96`"
          x-bind:max="roomState.roundTtl"
          x-bind:value="msRemaining"
        ></progress>
      </div>
      <div class="flex flex-row gap-4 mb-5">
        <svg
          class="size-8"
          x-show="auth"
          x-bind:data-jdenticon-value="auth?.id"
        ></svg>
        <div>Moves Remaining: <span x-text="playerState.coins"></span></div>
      </div>
      <div
        x-show="!prizeIdx"
        class="text-center text-lg ml-10 mr-10 mb-5 text-accent"
      >
        One of these cells has 0.00018 BTC. Find it and defend it from other
        players.
      </div>
      <div
        x-show="prizeIdx"
        class="text-center text-lg ml-10 mr-10 mb-5 text-success"
      >
        You found the BTC! Defend it from other players.
      </div>
      <div x-show="error" x-text="error" class="text-error m-5"></div>
      <div>
        <div class="grid grid-cols-10 gap-1">
          <template x-for="i in 100">
            <div
              x-bind:class="`w-10 h-10 bg-primary relative ${getCell(i).hasPrize ? 'bg-yellow-300 animate-[pulse_1s_ease-in-out_infinite]' : ''}`"
              x-on:click="join(i)"
            >
              <div
                x-show="getClientCell(i).joining"
                class="absolute top-0 left-0 w-full h-full animate-spin"
              >
                <svg
                  class="w-full h-full"
                  x-bind:data-jdenticon-value="getCell(i).playerId"
                ></svg>
              </div>
              <div x-show="getCell(i).playerId && !getClientCell(i).joining">
                <div class="absolute top-0 left-0 w-full h-full">
                  <svg
                    class="w-full h-full"
                    x-bind:data-jdenticon-value="getCell(i).playerId"
                  ></svg>
                </div>
                <div
                  x-show="getCell(i).health"
                  x-text="getCell(i).health"
                  class="absolute bottom-1 right-1 text-xs w-5 h-5 flex items-center justify-center bg-secondary text-secondary-content rounded-full"
                ></div>
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>
    <div class="hero bg-base-200">
      <div class="hero-content text-center">
        <div class="max-w-md">
          <h1 class="text-5xl font-bold">Progressive BTC Payout Rules</h1>
          <div class="text-2xl">
            Current Payout: 0.00018 BTC (~$5 USD at current BTC price)
          </div>
          <p class="py-6">
            How it works: We hid some BTC in one of the cells. If you can find
            it and defend the cell from other players, you win the pot.
          </p>
        </div>
      </div>
    </div>
  </div>
</div>
