<script server>
  if (!auth) {
    throw new BadRequestError('Unauthorized')
  }

  const { idx } = params

  if (!idx) {
    throw new BadRequestError('Missing idx')
  }

  const { getRoomState, setRoomState, pushRoomStateDelta } = resolve('room')

  let roomState = {}
  let error = null

  $app.runInTransaction((txApp) => {
    roomState = getRoomState(txApp)

    if (
      roomState.grid[idx]?.playerId &&
      roomState.grid[idx].playerId !== auth.id
    ) {
      error = { message: `Cell is occupied`, idx }
      return
    }
    if (!roomState.players[auth.id]) {
      roomState.players[auth.id] = { shards: 10, health: 0 }
    }

    if (roomState.players[auth.id]?.shards <= 0) {
      error = { message: `Not enough shards`, idx }
      return
    }
    roomState.players[auth.id].shards -= 1
    roomState.players[auth.id].health += 1

    if (!roomState.grid[idx]) {
      roomState.grid[idx] = { playerId: auth.id, health: 0 }
    }
    roomState.grid[idx].health += 1
    roomState.roundStartedAt = Date.now()

    setRoomState(roomState, txApp)

    const hasPrize = roomState.prizeIdx == idx
    roomState.grid[idx].hasPrize = hasPrize

    const delta = {
      [`grid.${idx}.playerId`]: auth.id,
      [`roundStartedAt`]: roomState.roundStartedAt,
    }
    pushRoomStateDelta(
      `2ruk2zo3x8k11h5`,
      delta,
      (client) => client.get('auth').id !== auth.id
    )
    delta[`grid.${idx}.hasPrize`] = hasPrize
    delta[`grid.${idx}.health`] = roomState.grid[idx].health
    delta[`players.${auth.id}.shards`] = roomState.players[auth.id].shards
    delta[`players.${auth.id}.health`] = roomState.players[auth.id].health
    pushRoomStateDelta(
      `2ruk2zo3x8k11h5`,
      delta,
      (client) => client.get('auth').id === auth.id
    )
  })

  return { error }
</script>
