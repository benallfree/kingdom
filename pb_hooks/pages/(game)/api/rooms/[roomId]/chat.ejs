<script server>
  const {
    getRoomState,
    setRoomState,
    getDefaultChatState,
    pushRoomStateDelta,
  } = resolve(`room`)
  const { DEFAULT_CHAT_MAX_MESSAGE_LENGTH } = resolve(`constants`)

  const text = request.body()?.text?.trim() || ``

  if (!text) return { error: `No message provided` }
  if (text.length > DEFAULT_CHAT_MAX_MESSAGE_LENGTH)
    return { error: `Message too long` }

  const { id } = auth
  const { roomId } = params

  const deferred = []
  $app.runInTransaction((txApp) => {
    const roomState = getRoomState(roomId, txApp)

    if (!roomState.chat) {
      roomState.chat = getDefaultChatState()
    }

    const t = Date.now()
    const key = `${t}-${id}`
    roomState.chat.messages[key] = { text }
    if (Object.keys(roomState.chat.messages).length > roomState.chat.max) {
      delete roomState.chat.messages[
        Object.keys(roomState.chat.messages).sort((a, b) => {
          const [t1, player1Id] = a.split('-')
          const [t2, player2Id] = b.split('-')
          return t1 - t2
        })[0]
      ]
    }

    setRoomState(roomId, roomState, txApp)
    deferred.push(() => {
      pushRoomStateDelta(roomId, { [`chat.messages.${key}`]: { text } })
    })
  })
  deferred.forEach((fn) => fn())

  return { success: true }
</script>
