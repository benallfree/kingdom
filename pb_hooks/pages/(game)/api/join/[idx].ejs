<script server>
  if (!auth) {
    throw new BadRequestError('Unauthorized')
  }

  const { idx } = params

  if (!idx) {
    throw new BadRequestError('Missing idx')
  }

  const stepGuard = (roomState) => {
    if (roomState.step !== 'placement') {
      error = { message: `You can't do that right now.`, idx }
      return
    }
    if (roomState.stepStartedAt + roomState.stepTtl < Date.now()) {
      error = { message: `Placement phase has ended.`, idx }
      return
    }
    return true
  }

  const cellIsOwnedOrEmptyGuard = (roomState) => {
    if (
      roomState.grid[idx]?.playerId &&
      roomState.grid[idx].playerId !== auth.id
    ) {
      error = { message: `Cell is occupied`, idx }
      return
    }
    return true
  }

  const { DEFAULT_SHARDS } = resolve('cell-math')
  const playerHasEnoughShardsGuard = (roomState) => {
    if (!roomState.players[auth.id]) {
      roomState.players[auth.id] = { shards: DEFAULT_SHARDS, health: 0 }
    }

    if (roomState.players[auth.id]?.shards <= 0) {
      error = { message: `Not enough shards`, idx }
      return
    }
    return true
  }

  const shouldAttemptJoin = (roomState) => {
    return (
      stepGuard(roomState) &&
      cellIsOwnedOrEmptyGuard(roomState) &&
      playerHasEnoughShardsGuard(roomState)
    )
  }

  const { ROOM_ID } = resolve('constants')
  const { getRoomState, setRoomState, pushRoomStateDelta } = resolve('room')

  let roomState = {}
  let error = null
  roomState = getRoomState(ROOM_ID, $app)

  if (shouldAttemptJoin(roomState)) {
    const deferred = []
    $app.runInTransaction((txApp) => {
      roomState = getRoomState(ROOM_ID, txApp)
      if (!shouldAttemptJoin(roomState)) return

      roomState.players[auth.id].shards -= 1
      roomState.players[auth.id].health += 1

      if (!roomState.grid[idx]) {
        roomState.grid[idx] = { playerId: auth.id, health: 0 }
      }
      roomState.grid[idx].health += 1
      roomState.roundStartedAt = Date.now()

      setRoomState(ROOM_ID, roomState, txApp)

      const hasPrize = roomState.prizeIdx == idx
      roomState.grid[idx].hasPrize = hasPrize

      const publicDelta = {
        [`grid.${idx}.playerId`]: auth.id,
        [`roundStartedAt`]: roomState.roundStartedAt,
        [`grid.${idx}.hasPrize`]: hasPrize,
      }
      deferred.push(() => {
        pushRoomStateDelta(
          ROOM_ID,
          publicDelta,
          (client) => client.get('auth').id !== auth.id
        )
      })

      const privateDelta = {
        [`grid.${idx}.health`]: roomState.grid[idx].health,
        [`players.${auth.id}.shards`]: roomState.players[auth.id].shards,
        [`players.${auth.id}.health`]: roomState.players[auth.id].health,
      }
      deferred.push(() => {
        pushRoomStateDelta(
          ROOM_ID,
          { ...publicDelta, ...privateDelta },
          (client) => client.get('auth').id === auth.id
        )
      })
    })
    deferred.forEach((fn) => fn())
  }
  return { error }
</script>
