<script server>
  if (!auth) {
    throw new BadRequestError('Unauthorized')
  }

  const attackerIdx = parseInt(params.attackerIdx)
  const defenderIdx = parseInt(params.defenderIdx)

  if (!attackerIdx || !defenderIdx) {
    throw new BadRequestError('Missing playerIdx or targetIdx')
  }

  const stepGuard = (roomState) => {
    if (roomState.step !== 'assignment') {
      error = { message: `You can't do that right now.`, defenderIdx }
      return
    }
    if (roomState.stepStartedAt + roomState.stepTtl < Date.now()) {
      error = { message: `Assignment phase has ended.`, defenderIdx }
      return
    }
    return true
  }

  const isPlayerCellOwnedByAuthUser = (roomState) => {
    if (roomState.grid[attackerIdx]?.playerId !== auth.id) {
      error = { message: `Origin cell is not yours.`, idx: attackerIdx }
      return
    }
    return true
  }

  const isTargetCellOwnedByOtherPlayer = (roomState) => {
    if (!roomState.grid[defenderIdx]?.playerId) {
      error = { message: `Target cell is empty.`, idx: defenderIdx }
      return
    }
    if (roomState.grid[defenderIdx]?.playerId === auth.id) {
      error = { message: `Cannot attack your own cell.`, idx: defenderIdx }
      return
    }
    return true
  }

  const isTargetAdjacentToPlayerCell = () => {
    const { gatherNeighbors } = resolve('cell-math')
    const neighbors = gatherNeighbors(attackerIdx)
    dbg({ neighbors, defenderIdx, attackerIdx })
    if (!neighbors.includes(defenderIdx)) {
      error = {
        message: `Target cell is not adjacent to origin cell.`,
        idx: defenderIdx,
      }
      return
    }
    return true
  }

  const isAttackAllowed = (roomState) => {
    return (
      stepGuard(roomState) &&
      isTargetAdjacentToPlayerCell() &&
      isPlayerCellOwnedByAuthUser(roomState, attackerIdx) &&
      isTargetCellOwnedByOtherPlayer(roomState, defenderIdx)
    )
  }

  const { ROOM_ID } = resolve('constants')
  const { getRoomState, setRoomState, pushRoomStateDelta } = resolve('room')

  let roomState = {}
  let error = null
  roomState = getRoomState(ROOM_ID, $app)

  if (isAttackAllowed(roomState)) {
    dbg(`Attack is allowed`)
    const deferred = []
    $app.runInTransaction((txApp) => {
      roomState = getRoomState(ROOM_ID, txApp)
      if (!isAttackAllowed(roomState)) return

      if (!roomState.grid[defenderIdx].attackedBy) {
        roomState.grid[defenderIdx].attackedBy = {}
      }
      if (roomState.grid[defenderIdx].attackedBy[attackerIdx]) {
        delete roomState.grid[defenderIdx].attackedBy[attackerIdx]
      } else {
        roomState.grid[defenderIdx].attackedBy[attackerIdx] = true
      }

      setRoomState(ROOM_ID, roomState, txApp)

      const delta = {
        grid: {
          [`${defenderIdx}`]: {
            attackedBy: {
              [`${attackerIdx}`]:
                !!roomState.grid[defenderIdx].attackedBy[attackerIdx] || null,
            },
          },
        },
      }
      deferred.push(() => {
        pushRoomStateDelta(
          ROOM_ID,
          delta,
          (client) => client.get('auth').id === auth.id
        )
      })
    })
    deferred.forEach((fn) => fn())
  }
  return { error }
</script>
