<%-resolve('cell-math', {mode: 'script'}) %>

<script>
  const applyDeltas = (e, roomState) => {
    Object.entries(e).forEach(([key, value]) => {
      let node = roomState
      const keys = key.split('.')
      const leafKey = keys.pop()
      const leafValue = value
      const leafNode = keys.reduce((node, k) => {
        if (!node[k]) {
          node[k] = {}
        }
        return node[k]
      }, roomState)
      leafNode[leafKey] = leafValue
    })
  }

  const normalizeRoomState = (roomState) => {
    for (let i = 1; i <= 100; i++) {
      roomState.grid[i] = {
        playerId: null,
        hasPrize: this.prizeIdx == i,
        health: 0,
        ...roomState.grid[i],
      }
    }
    return roomState
  }

  const gameState = {
    error: null,
    prizeIdx: null,
    msRemaining: 0,
    pctRemaining: 0,
    auth: null,
    isReady: false,
    selectedIdx: null,
    getCell(idx) {
      if (!this.roomState.grid[idx]) {
        this.roomState.grid[idx] = {
          playerId: null,
          health: 0,
        }
      }
      return this.roomState.grid[idx]
    },
    getClientCell(idx) {
      if (!this.clientRoomState.grid[idx]) {
        this.clientRoomState.grid[idx] = {
          joining: false,
        }
      }
      return this.clientRoomState.grid[idx]
    },
    roomState: {
      grid: {},
      players: {},
      roundNum: 0,
      roundStartedAt: +new Date(),
      step: 'placement',
      stepStartedAt: +new Date(),
      stepTtl: 1000 * 60 * 5,
      maxRounds: 0,
      roundTtl: 0,
    },
    clientRoomState: {
      grid: {},
    },
    playerState: {
      shards: 10,
      health: 0,
    },
    idBase: 0,
    uniqId() {
      return this.idBase++
    },
    actionableNeighbors: [],
    playerOwnsCell(idx) {
      return this.roomState.grid[idx].playerId == this.auth.id
    },
    isOpponentCell(idx) {
      return (
        this.roomState.grid[idx].playerId &&
        this.roomState.grid[idx].playerId !== this.auth.id
      )
    },
    gatherNeighborOpponents(idx) {
      return gatherNeighbors(idx).filter((idx) => this.isOpponentCell(idx))
    },
    toggleNeighborAttack(idx) {
      if (!this.clientRoomState.grid[idx].attackedBy) {
        this.clientRoomState.grid[idx].attackedBy = []
      }
      if (
        this.clientRoomState.grid[idx].attackedBy.includes(this.selectedIdx)
      ) {
        this.clientRoomState.grid[idx].attackedBy = this.clientRoomState.grid[
          idx
        ].attackedBy.filter((id) => id !== this.selectedIdx)
      } else {
        this.clientRoomState.grid[idx].attackedBy.push(this.selectedIdx)
      }
      this.clientRoomState.grid[idx].isBeingAttacked =
        this.clientRoomState.grid[idx].attackedBy.length > 0
    },
    handleCellClick(idx) {
      if (this.roomState.step == 'placement') {
        this.join(idx)
      }
      if (this.roomState.step == 'assignment') {
        if (this.playerOwnsCell(idx)) {
          this.selectedIdx = idx
          this.actionableNeighbors = this.gatherNeighborOpponents(idx)
        } else {
          if (this.selectedIdx) {
            if (this.actionableNeighbors.includes(idx)) {
              this.toggleNeighborAttack(idx)
            } else {
              this.selectedIdx = null
              this.actionableNeighbors = []
            }
          } else {
            this.error = { message: `Select your own cell`, idx }
          }
        }
      }
    },
    join(idx) {
      this.error = null
      this.getClientCell(idx).joining = true
      pb.send(`/api/join?idx=${idx}`, { requestKey: this.uniqId() })
        .then((res) => {
          this.error = res.error
        })
        .finally(() => {
          this.getClientCell(idx).joining = false
        })
    },
    init() {
      const watch = (() => {
        let unsub
        return () => {
          unsub?.()
          unsub = pb.realtime.subscribe(`rooms/2ruk2zo3x8k11h5/delta`, (e) => {
            applyDeltas(e, this.roomState)
          })
        }
      })()
      const login = () => {
        pb.send(`/api/login`).then((res) => {
          const { token, user } = res
          pb.authStore.save(token, user)
          this.auth = user
          this.$nextTick(jdenticon)
          this.roomState = normalizeRoomState(res.roomState)
          this.isReady = true
          watch()
        })
      }
      login()
      pb.realtime.subscribe('PB_CONNECT', (e) => {
        // login()
      })

      this.$watch('roomState', (value) => {
        this.$nextTick(jdenticon)
      })
      const calcTimeRemaining = (roomState) => {
        this.msRemaining = Math.max(
          0,
          this.roomState.stepStartedAt + this.roomState.stepTtl - Date.now()
        )
        this.pctRemaining = this.msRemaining / this.roomState.stepTtl
      }
      this.$watch('roomState', calcTimeRemaining, (value) => {
        const { msRemaining, pctRemaining } = calcTimeRemaining(value)
        this.msRemaining = msRemaining
        this.pctRemaining = pctRemaining
      })
      this.$watch('roomState', (value) => {
        if (!this.auth) return
        this.playerState = value.players[this.auth.id] || {
          shards: 10,
          health: 0,
        }
      })
      this.$watch('roomState', (value) => {
        const cellEntries = Object.entries(value.grid)
        for (let i = 0; i < cellEntries.length; i++) {
          const [idx, cell] = cellEntries[i]
          if (cell.hasPrize) {
            this.prizeIdx = idx
            break
          }
        }
      })
      this.$nextTick(() => {
        setInterval(() => {
          calcTimeRemaining(this.roomState)
        }, 100)
      })
    },
  }
</script>

<div x-data="gameState">
  <div x-show="isReady" class="flex flex-col items-center">
    <div class="flex flex-col items-center max-w-[400px]">
      <div class="h-[40px] overflow-hidden">
        <img
          src="<%=asset('/splash.webp')%>"
          class="relative -translate-y-1/2 top-[27px]"
        />
      </div>

      <div class="flex flex-row items-center gap-2 mt-2 w-full">
        <div
          class="w-16 ml-2 text-2xs font-mono flex flex-row items-center gap-1"
        >
          <div
            class="border border-1 border-primary rounded relative w-4 h-4 flex items-center justify-center"
          >
            <div x-show="roomState.step == 'placement'" class="animate-pulse">
              üìç
            </div>
            <div x-show="roomState.step == 'assignment'" class="animate-pulse">
              üéØ
            </div>
            <div x-show="roomState.step == 'resolution'" class="animate-pulse">
              ‚öñÔ∏è
            </div>
          </div>
          <div class="">
            <span x-text="String(roomState.roundNum).padStart(3, '0')"></span
            >/<span
              x-text="String(roomState.maxRounds).padStart(3, '0')"
            ></span>
          </div>
        </div>
        <div class="flex-1">
          <progress
            x-bind:class="`progress  ${pctRemaining > 0.7 ? 'progress-success' : (pctRemaining > 0.3 ? 'progress-info' : 'progress-error')}`"
            x-bind:max="roomState.stepTtl"
            x-bind:value="msRemaining"
          ></progress>
        </div>
        <div class="relative w-16 h-8 mr-2 text-2xs font-mono">
          <svg
            class="size-4 absolute top-1/2 -translate-y-1/2 left-0"
            x-show="auth"
            x-bind:data-jdenticon-value="auth?.id"
          ></svg>
          <div class="absolute top-0 right-0">
            üíé<span x-text="String(playerState.shards).padStart(4, '0')"></span>
          </div>
          <div class="absolute bottom-0 right-0">
            ‚ù§Ô∏è<span x-text="String(playerState.health).padStart(4, '0')"></span>
          </div>
        </div>
      </div>
      <div
        x-text="error?.message"
        x-bind:class="`text-error h-5 mb-2 text-center w-full ${error ? `visible` : `invisible`}`"
      ></div>

      <div>
        <div class="grid grid-cols-10 gap-0">
          <template x-for="i in 100">
            <div
              class="w-10 h-10 border border-primary border-1 relative"
              x-on:click="handleCellClick(i)"
            >
              <div
                x-show="getClientCell(i).joining"
                class="absolute top-0 left-0 w-full h-full animate-spin"
              >
                <svg
                  class="w-full h-full"
                  x-bind:data-jdenticon-value="auth?.id"
                ></svg>
              </div>
              <div
                x-show="error?.idx == i"
                class="absolute top-0 left-0 w-full h-full bg-red-600 animate-out fade-out duration-500 fill-mode-forwards"
              ></div>
              <div x-show="getCell(i).playerId && !getClientCell(i).joining">
                <div class="absolute top-0 left-0 w-full h-full">
                  <svg
                    class="w-full h-full"
                    x-bind:data-jdenticon-value="getCell(i).playerId"
                  ></svg>
                </div>
                <div
                  x-show="getCell(i).health"
                  x-text="getCell(i).health"
                  class="absolute bottom-0 right-0 text-xs w-5 h-5 flex items-center justify-center bg-green-700 text-green-50 rounded-tl-lg"
                ></div>
              </div>
              <div
                x-show="getCell(i).hasPrize"
                class="absolute top-0 left-0 w-full h-full bg-yellow-300 animate-[pulse_1s_ease-in-out_infinite]"
              ></div>
              <div
                x-show="selectedIdx == i"
                class="absolute top-0 left-0 w-full h-full border-2 border-green-600 animate-pulse"
              ></div>
              <div
                x-show="actionableNeighbors.includes(i)"
                class="absolute top-0 left-0 w-full h-full border-2 border-red-600 animate-pulse"
              ></div>
              <div
                x-show="getClientCell(i).isBeingAttacked"
                class="absolute top-0 left-0 w-full h-full border-2 border-red-600 bg-red-600 animate-pulse"
              ></div>
              <div
                x-show="getClientCell(i).attackedBy?.length"
                x-text="getClientCell(i).attackedBy?.length"
                class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 rounded-full bg-red-600 animate-pulse flex items-center justify-center"
              ></div>
            </div>
          </template>
        </div>
      </div>
      <div
        x-show="roomState.prize?.banner"
        x-html="roomState.prize?.banner"
      ></div>
    </div>
  </div>
</div>
